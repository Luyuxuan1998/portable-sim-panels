<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   version="1.1"
   viewBox="0 0 150 150"
   max-height="100%"
   max-width="100%">
  <sodipodi:namedview
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1"
     objecttolerance="10"
     gridtolerance="10"
     guidetolerance="10"
     inkscape:pageopacity="0"
     inkscape:pageshadow="2"
     inkscape:window-width="2495"
     inkscape:window-height="1416"
     id="namedview10"
     showgrid="false"
     inkscape:zoom="3.1466667"
     inkscape:cx="-34.943076"
     inkscape:cy="35.475865"
     inkscape:window-x="65"
     inkscape:window-y="24"
     inkscape:window-maximized="1"
     inkscape:current-layer="label-value-group" />
  <defs
     id="defs17121">
    <script
       xlink:href="../libs/d3.3.min.js"
       id="script9" />
    <script
       xlink:href="../libs/jquery.min.js"
       id="script13" />
    <script
       type="text/javascript"
       id="businesslogic"><![CDATA[

//----------------
Object.defineProperty( Object.prototype, "_has", { value: function( needle ) {
var obj = this;
var needles = needle.split( "." );
var needles_full=[];
var needles_square;
for( var i = 0; i<needles.length; i++ ) {
    needles_square = needles[i].split( "[" );
    if(needles_square.length>1){
        for( var j = 0; j<needles_square.length; j++ ) {
            if(needles_square[j].length){
                needles_full.push(needles_square[j]);
            }
        }
    }else{
        needles_full.push(needles[i]);
    }
}
for( var i = 0; i<needles_full.length; i++ ) {
    var res = needles_full[i].match(/^((\d+)|"(.+)"|'(.+)')\]$/);
    if (res != null) {
        for (var j = 0; j < res.length; j++) {
            if (res[j] != undefined) {
                needles_full[i] = res[j];
            }
        }
    }

    if( typeof obj[needles_full[i]]=='undefined') {
        return false;
    }
    obj = obj[needles_full[i]];
}
return true;
}});
//----------------

        window.parent.addEventListener("update", eventHandler, true);

        function eventHandler(update) {
          Update(update.detail);
        }

        let config = {},
          pi = Math.PI,
          stepangle,
          fullrange,
          zeroangle,
          calculatedValue,
          id = window.frameElement.id;

        var path = window.parent.location.pathname.split('/');
        path.pop();
        path = path.join("/") + "/";
        $.getJSON(path+"/config.json", function(json){
          config = json[window.frameElement.id];
          init();
        });

        window.onload = setTimeout(function(){
          //init();
        }, 500);

        function init(){
          minAngle = (config._has("baseStyle.arcMinAngle")) ? config.baseStyle.arcMinAngle : -140
          maxAngle = (config._has("baseStyle.arcMaxAngle")) ? config.baseStyle.arcMaxAngle : 110
          pointerwidth = (config._has("baseStyle.pointerwidth")) ? config.baseStyle.pointerwidth : 2
          innerRadius = (config._has("baseStyle.innerRadius")) ? config.baseStyle.innerRadius : 68
          outerRadius = (config._has("baseStyle.outerRadius")) ? config.baseStyle.outerRadius : 70
          baseColor = (config._has("baseStyle.baseColor")) ? config.baseStyle.baseColor : "grey"
          normalColor = (config._has("baseStyle.normalColor")) ? config.baseStyle.normalColor : "white"
          calculatedValue = (config._has("calculatedValue")) ? config.calculatedValue : 0
          fullrange =  maxAngle - minAngle
          stepangle = fullrange / (config.rangemax-config.rangemin);
          zeroangle = config.rangemin * stepangle * -1 + minAngle;

          let svg = d3.select("svg")
              .append("svg")
              .attr("viewBox","0 0 150 150")
              .attr("width", 150)
              .attr("height", 150)
              .append("g")
              .attr("transform", "translate(75,75)");

          let arc = d3.svg.arc()
              .innerRadius(68)
              .outerRadius(70)
              .startAngle(minAngle * (pi/180))
              .endAngle(maxAngle * (pi/180));

          svg.append("path")
              .attr("class", "arc")
              .attr("fill", baseColor)
              .attr("d", arc);

          config.ranges.forEach(function(range, i) {
            let rangemin = zeroangle + range.minValue * stepangle;
            let rangemax =  zeroangle + range.maxValue * stepangle;
            let arc2 = d3.svg.arc()
              .innerRadius(innerRadius - range.width)
              .outerRadius(innerRadius)
              .startAngle(rangemin * (pi/180))
              .endAngle(rangemax * (pi/180));
            svg.append("path")
              .attr("class", "arc-"+i)
              .attr("fill",range.color)
              .attr("d", arc2);
          })
          d3.select('#label').text(config.label);

          svg.append("path")
            .style("stroke-width", 1)
            .style("stroke", "#000")
            .style("fill", "white")
            .attr("d", "M 0,0 L 2,0 L 4,-50 L 0,-69 L -4,-50 L -2,0 L 0,0")
            .attr("id","needle")
            .attr('x', -75).attr('y', -75);

            // console.log('\n');
        }

        function Update(inputObject){
          obj = inputObject;
          for(let attr = 0; attr < Object.keys(inputObject).length; attr++){
            let key = Object.keys(inputObject)[attr];
            let value = Object.values(inputObject)[attr] ;
            value = (calculatedValue ? eval(calculatedValue.replace("x",value)) : value);

            switch (key) {

              case id:
                degrees = zeroangle + value *stepangle;
                d3.select('#needle').attr('transform', 'rotate(' + degrees + ', 0, 0)');
                if (config.rangemax-config.rangemin <= 99) {
                  d3.select('#value').text(value.toFixed(1));
                } else {
                  d3.select('#value').text(Math.round(value));
                }

                if (config.ranges) {
                  let arccolor = baseColor
                  config.ranges.forEach(function(range, i) {
                    let rangemin = zeroangle + range.minValue * stepangle;
                    let rangemax =  zeroangle + range.maxValue * stepangle;
                    let arc = d3.select(".arc-"+i);
                    let arc2;
                    if(value > range.minValue && value <= range.maxValue && range.alerttype) {
                      arc2 = d3.svg.arc()
                        .innerRadius(innerRadius - range.activewidth)
                        .outerRadius(innerRadius)
                        .startAngle(rangemin * (pi/180))
                        .endAngle(rangemax * (pi/180));
                      arccolor = range.color;
                    } else{
                      arc2 = d3.svg.arc()
                        .innerRadius(innerRadius - range.width)
                        .outerRadius(innerRadius)
                        .startAngle(rangemin * (pi/180))
                        .endAngle(rangemax * (pi/180));                  }
                  arc.attr("d", arc2);
                  d3.select(".arc").attr("fill", arccolor)
                  })
                }
                break;

              case 'test':
                let x = value.x;
                let y = value.y;
                Update({
                  "ELEVATOR_TRIM_POSITION":(x/3),
                  "ELEVATOR_TRIM_POSITION2":(x/3),
                  "Plane_Bank_Degrees":(x/3),
                  "Plane_Pitch_Degrees":(y/10),
                  "Autopilot_Altitude_Lock_Var":Math.abs(y*x*2),
                  "Plane_Heading_Degrees_True":x,
                  "Airspeed_Indicated": y*-1,
                  "Plane_Altitude":x*y*-1,
                  "GPS_GROUND_SPEED":y*-1.04/1.94384,
                  "INCIDENCE_BETA":y/1.5,
                  "GENERAL_ENG_RPM_1": x,
                  "ENG_MANIFOLD_PRESSURE_1": x/2.2,
                  "ENG_MANIFOLD_PRESSURE_2": x/2,
                  "GEAR_CENTER_POSITION": y/4,
                  "FLAPS_HANDLE_PERCENT": x/4,
                  "Vertical_Speed": x*6
                });
                break;

              default:
                //console.log('       :-(    Attribute '+key+' not relevant for this element... Ignoring');
            };
          }
        }

        ]]></script>
  </defs>
  <metadata
     id="metadata17124">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     id="label-value-group"
     transform="translate(8.5805085,-67.372882)">
    <text
       sodipodi:linespacing="0%"
       xml:space="preserve"
       style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:24px;line-height:0%;font-family:'DejaVu Sans';-inkscape-font-specification:'DejaVu Sans, Bold';text-align:end;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:end;fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       x="137.71974"
       y="210.75435"
       id="value"
       inkscape:label="value"><tspan
         id="tspan4144"
         style="font-size:22.5px;fill:#ffffff">0000</tspan></text>
    <text
       sodipodi:linespacing="0%"
       xml:space="preserve"
       style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:16px;line-height:0%;font-family:'DejaVu Sans';-inkscape-font-specification:'DejaVu Sans, Bold';text-align:end;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:end;fill:#cccccc;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       x="137.71974"
       y="185.67311"
       id="label"
       inkscape:label="label"><tspan
         id="tspan4144-6"
         style="font-size:17.5px;fill:#cccccc">label</tspan></text>
  </g>
</svg>
